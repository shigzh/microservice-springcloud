server:
  port: 8001

spring:
  application:
    name: microservice-product #这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个

  mvc:
    date-format: yyyy-MM-dd HH:mm:ss #修改表单提交到后台的日期格式

  #数据源配置
  datasource:
    username: test
    password: 2pB88mUiHI9Z$uZ0
    url: jdbc:mysql://127.0.0.1:3306/sanfront
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource #指定自定义的数据源类型,如果这里不指定,默认使用的是HikariDataSource
    initialSize: 8 #数据库连接池初始化连接大小
    minIdle: 5 #数据库连接池最小连接池数量
    maxActive: 20 #数据库连接池最大连接池数量
    maxWait: 60000 #获取连接时最大等待时间，单位毫秒
    timeBetweenEvictionRunsMillis: 60000 #有两个含义：1) Destroy线程会检测连接的间隔时间，即配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 2) testWhileIdle的判断依据；
    minEvictableIdleTimeMillis: 300000 #配置一个连接在池中最小生存的时间，单位是毫秒
    validationQuery: SELECT 1 FROM DUAL #用来检测连接是否有效的sql
    testWhileIdle: true #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    testOnBorrow: false #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnReturn: false #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    poolPreparedStatements: false #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭,分库分表较多的数据库，建议配置为false。
    maxPoolPreparedStatementPerConnectionSize: -1 #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
    #监控配置
    filters: stat,wall,slf4j
    useGlobalDataSourceStat: true #合并多个DruidDataSource的监控数据，多数据源
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500 #druid.stat.mergeSql=true 合并执行的相同sql，避免因为参数不同而统计多条sql语句, druid.stat.slowSqlMillis=500 用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢

#mybatis配置文件
mybatis:
  mapper-locations: classpath:mybatis/mapper/*.xml #mybatis的sql的mapper接口映射文件
  type-aliases-package: cn.sgz.springcloud.entity #对应实体类的路径
  configuration:
    map-underscore-to-camel-case: true #开启驼峰命名转换

#pagehelper分页插件
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql;

#日志配置
logging:
  level:
    root: info
    cn.sgz.springcloud: debug
  file: D:/logs/springcloud.log

#eureka配置
eureka:
  client:
    register-with-eureka: true # 服务注册开关
    fetch-registry: true # 服务发现开关
    service-url: # 注册到哪一个Eureka Server服务注册中心，多个中间用逗号分隔
      #单机版
      #defaultZone: http://localhost:6001/eureka
      # 集群版: 配置其他的Eureka Server服务端访问地址
      defaultZone: http://eureka6001.com:6001/eureka/,http://eureka6002.com:6002/eureka/
  instance:
    instance-id: ${spring.application.name}:${server.port} # 指定实例ID,就不会显示主机名了
    prefer-ip-address: true #访问路径可以显示IP地址

# 在被监控服务上添加暴露端点(监控的服务启动类上必须 @EnableHystrix //开启 Hystrix 熔断机制的支持)
management:
  endpoints:
    web:
      exposure:
        include: hystrix.stream
